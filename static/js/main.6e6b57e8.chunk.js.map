{"version":3,"sources":["logo.svg","Galery.js","FetchData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Galery","ImgData","className","map","img_datas","key","atime","src","name","FetchData","state","loading","imgdata","fetch","response","json","data","this","setState","console","log","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,qLCiC5BC,G,MA7BD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,QAEZ,OACJ,6BACC,yBAAKC,UAAU,SAAf,eACD,yBAAMA,UAAU,aACfD,EAAQE,KAAI,SAACC,GAAD,OAEb,wBAAIC,IAAOD,EAAUE,OACrB,yBAAKJ,UAAU,QACX,6BACI,yBAAKK,IAAK,gGAAgGH,EAAUI,OACpH,6CAAoBJ,EAAUE,MAA9B,gBCdaG,E,2MAEjBC,MAAQ,CACJC,SAAS,EACTC,QAAS,I,2MAKG,4F,SACWC,MADX,6F,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAACN,QAAUI,IAEzBG,QAAQC,IAAIJ,G,qIAQZ,OACI,6BACI,kBAAC,EAAD,CAAQf,QAASgB,KAAKP,MAAME,e,GAxBLS,IAAMC,W,MCkB9BC,MAff,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAAlB,+BAKA,kBAAC,EAAD,QCDcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e6b57e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport \"./Galery.css\"\r\n\r\n\r\nconst Galery= ({ImgData} ) =>  {\r\n\r\n    return (\r\n<div> \r\n <div className=\"title\"> In Camera </div>         \r\n<div  className=\"Container\">\r\n{ImgData.map((img_datas) => (\r\n\r\n<li key = {img_datas.atime} >\r\n<div className=\"card\">\r\n    <div>\r\n        <img src={\"http://ec2-18-189-3-76.us-east-2.compute.amazonaws.com:3000/api/Containers/imagenes/download/\"+img_datas.name}></img>\r\n        <h5 > Capturada  : {img_datas.atime}  </h5>\r\n    </div>\r\n</div>\r\n</li>\r\n\r\n)) }\r\n\r\n</div>\r\n\r\n</div>\r\n      \r\n\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default Galery","import React from \"react\"; \r\nimport Galery from \"./Galery\";\r\nexport default class FetchData extends React.Component {\r\n\r\n    state = {\r\n        loading: true,\r\n        imgdata: []\r\n      };\r\n\r\n\r\n      async componentDidMount(){\r\n        const url = \"http://ec2-18-189-3-76.us-east-2.compute.amazonaws.com:3000/api/Containers/imagenes/files\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState({imgdata : data});\r\n    \r\n        console.log(data);\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    render(){\r\n    \r\n        return (\r\n            <div>\r\n                <Galery ImgData={this.state.imgdata}></Galery>\r\n            </div>\r\n    \r\n      \r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport FetchData from \"./FetchData.js\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Grupo 12 - Untittled galery\n      </header>\n\n   \n      <FetchData></FetchData>\n     \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}